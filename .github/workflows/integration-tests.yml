name: Integration Tests

on:
  workflow_dispatch:
  push:
    branches:
      - '**'

jobs:
  build:
    name: Build, run database integration tests, and publish results
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        java: [8, 11]
    steps:

# SETUP BUILD ENVIRONMENT
    - id: checkout-code
      name: Checkout code
      uses: actions/checkout@v2
    - id: setup-jdk
      name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
    - id: cache-m2
      name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - id: cache-ivy2
      name: Cache Ivy packages
      uses: actions/cache@v2
      with:
        path: ~/.ivy2
        key: ${{ runner.os }}-ivy2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-ivy2
    - id: install-packages
      name: Install packages
      run: |
        # Install Graphviz
        sudo apt-get -qq update
        sudo apt-get -q install graphviz
    - id: show-environment
      name: Show environment
      run: |
        # Show environment
        echo github.repository: ${{ github.repository }}
        echo github.ref: ${{ github.head_ref || github.ref }}
        echo github.sha: ${{ github.sha }}
        mvn -v
        cat ~/.m2/settings.xml

# LINT CODE
    - id: lint-code-base
      name: Lint Code Base
      uses: docker://github/super-linter:v3
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_ALL_CODEBASE: true
        VALIDATE_YAML: true
        VALIDATE_JSON: true
        VALIDATE_XML: true
        VALIDATE_MD: true
        VALIDATE_BASH: true
        # VALIDATE_PYTHON: false
        # VALIDATE_RUBY: false
        VALIDATE_JAVASCRIPT_ES: true
        VALIDATE_DOCKER: true
        VALIDATE_CSS: true
        VALIDATE_ENV: true

# BUILD AND TEST
    - id: build-test
      name: Build and run database integration tests
      env:
        TZ: GMT
      run: |
        # Build
        mvn \
          --no-transfer-progress \
          --batch-mode \
          -Dtestcoverage \
          -Dlightdb \
          -Dheavydb \
          -Ddistrib \
          -Ddocker.skip=false \
          clean install \
          org.jacoco:jacoco-maven-plugin:0.8.5:report-aggregate

# GET TEST RESULTS
    - id: publish-test-results
      name: Upload results and coverage
      if: contains(github.ref, 'master')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        bash <(curl -s https://codecov.io/bash) -t 4456b669-238d-485f-a64a-250449710514
    - id: upload-coverage-test-results
      name: Upload coverage test results
      uses: actions/upload-artifact@v1
      with:
        name: coverage-test-results
        path: ./schemacrawler/target/site/jacoco-aggregate
