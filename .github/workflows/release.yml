name: Create Release

on:
  workflow_dispatch:
  push:
    branches-ignore:
      - '*'
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
      - v[0-9]+.[0-9]+.[0-9]+-[A-Z]

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:

# SETUP BUILD ENVIRONMENT
    - id: cache-m2
      name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - id: cache-ivy2
      name: Cache Ivy packages
      uses: actions/cache@v2
      with:
        path: ~/.ivy2
        key: ${{ runner.os }}-ivy2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-ivy2
    - id: checkout-code
      name: Checkout code
      uses: actions/checkout@v2
    - id: setup-jdk
      name: Setup JDK
      uses: actions/setup-java@v1
      with:
        java-version: 8
        server-id: sonatype-nexus
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
    - id: install-packages
      name: Install packages
      run: |
        # Install Graphviz
        sudo apt-get -qq update
        sudo apt-get -q install graphviz
    - id: show-environment
      name: Show environment
      run: |
        # Show environment
        echo github.repository: ${{ github.repository }}
        echo github.ref: ${{ github.head_ref || github.ref }}
        echo github.sha: ${{ github.sha }}
        mvn -v
        cat ~/.m2/settings.xml

# BUILD FOR DISTRIBUTION
    - id: build
      name: Build and test for distribution
      run: |
        # Build
        mvn \
          --no-transfer-progress \
          --batch-mode \
          -Ddistrib \
          -Ddocker.skip=false \
          clean install

# PUBLISH WEBSITE TO GITHUB PAGES
    - id: pubish-website
      name: Publish website to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./schemacrawler-website/target/_website
        force_orphan: true
        user_name: 'Sualeh Fatehi'
        user_email: 'sualeh@hotmail.com'
        commit_message: 'SchemaCrawler Website ${{ github.sha }}'

# PUBLISH DOCKER IMAGE
    - id: publish-docker-image
      name: Publish Docker image
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        # Publish Docker image
        docker version
        docker tag schemacrawler/schemacrawler schemacrawler/schemacrawler:v16.11.7
        docker tag schemacrawler/schemacrawler schemacrawler/schemacrawler:latest
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker push schemacrawler/schemacrawler
        docker logout

# CREATE GITHUB RELEASE AND ADD ASSETS
    - id: create-release
      name: Create GitHub release
      uses: actions/create-release@latest
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body: |
          SchemaCrawler Release ${{ github.sha }}
        draft: false
        prerelease: false
    - id: upload-release-zip
      name: Upload SchemaCrawler distribution zip
      uses: actions/upload-release-asset@latest
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./schemacrawler-distrib/target/schemacrawler-16.11.7-distribution.zip
        asset_name: schemacrawler-16.11.7-distribution.zip
        asset_content_type: application/zip
    - id: upload-release-sha
      name: Upload SchemaCrawler distribution zip SHA
      uses: actions/upload-release-asset@latest
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }}
        asset_path: ./schemacrawler-distrib/target/schemacrawler-16.11.7-distribution.zip.SHA-512
        asset_name: schemacrawler-16.11.7-distribution.zip.SHA-512
        asset_content_type: text/plain

# PUBLISH TO CENTRAL REPOSITORY
    - id: install-secret-key
      name: Install secret key
      if: startsWith(github.ref, 'refs/tags/')
      # Note: OSSRH_GPG_SECRET_KEY is exported using gpg --export-secret-keys -a <keyid>
      # and has newlines substituted with a literal \n
      run: |
        # Install secret key
        cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
        gpg --list-secret-keys --keyid-format LONG
    - id: publish-to-central
      name: Publish to Central Repository
      if: startsWith(github.ref, 'refs/tags/')
      env:
        MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
      run: |
        # Publish to Central Repository
        export GPG_TTY=$(tty)
        mvn \
          --no-transfer-progress \
          --batch-mode \
          -Ddistrib \
          -Dmaven.javadoc.skip=false \
          -Dskip.signing.artifacts=false \
          -Dgpg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} \
          clean deploy
